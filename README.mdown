# CompetitionLabs Transformer Documentation

## What are the CompetitionLabs Transformers

CompetitionLabs Transformers are a way to integrate with the CompetitionLabs platform without having to make modifications to your message formats on your back-end systems. Using the CompetitionLabs Transformers, you can send a message to CompetitionLabs in your current format, transform the message into a form that can be accepted by the CompetitionLabs API, and push that message to CompetitionLabs. You can also transform messages before they are POSTed to your system via the CompetitionLabs WebHooks.

CompetitionLabs Transformers are created by writing small Scala classes that extend the CompetitionLabs Transformer classes to process messages.

Inbound events sent via RabbitMQ are transformed by extending the `CLMQTransformer` class. Your transformation class is run by the CompetitionLabs platform when the message is received.

Outbound events sent via WebHooks are transformed by extending the `CLWebhookTransformer` class. Your transformation class is run by the CompetitionLabs platform when an action occurs that would trigger a WebHook to fire.

|  If you want to | Write a class that extends |
|---|---|
| Map your existing MQ messages to a CompetittionLabs Event  | `CLMQTransformer`  |
| Map a CompetitionLabs WebHook message to a format your back-end systems accept | `CLWebhookTransformer`  |
|    |   |


## Common use cases for CompetitionLabs Transformers

Beyond mapping of message fields from your platform to CompetitionLabs, below are some common uses for CompetitionLabs Transformers:

* Create a new member when CompetitionLabs receives an event from a sign-up event
* Push a message into your platform when a new Product is created within CompetitionLabs
* Retrieve customer segment information from your platform for a new member

## Transform incoming messages from a RabbitMQ Queue

CompetitionLabs MQ transformer is used to transform a message received via RabbitMQ to your CompetitionLabs space. Within the transformer, you can map the fields in an incoming message to the CompetitionLabs API, trigger addition events, or implement custom business login.

To transform an incoming message from a RabbitMQ Queue:

1. Create a class that extends the `CLMQTransformer` class

	```scala
	package example.transformers

	import com.competitionlabs.transformers.{CLMQTransformer, CompetitionLabsApi}

	class exampleMQTranformer extends CLMQTransformer {
	  /**
	    * This method gets executed when a message is received on the message queue
	    *
	    * @param message            The message
	    * @param competitionLabsApi The CompetitionLabs API
	    */
	  override def apply(message: Array[Byte], competitionLabsApi: CompetitionLabsApi): Unit = {
	  	// Write your code to transform the message here
	  }
	}
	```

2. Test your class using Scala Test and the `CompetitionLabsApiTest` module

	```scala
	import example.transformers.exampleMQTranformer
	import org.scalatest._
	import utils.CompetitionLabsApiTest

	class exampleMQTranformer extends FunSpec with Matchers with GivenWhenThen with BeforeAndAfterEach with BeforeAndAfterAll {

	describe("Test the EXAMPLE message queue receiver implementation") {

		//  Run the test
		it("should receive a published a message and transform it into a CompetitionLabs event") {

			// Prepare the test
			val eventReferenceId = "1234"
			val transformer = new exampleMQTranformer()
			val json = exampleRabbitMQTest.jsonStringFromMq.toCharArray.map(_.toByte)
			val api = new CompetitionLabsApiTest()
			api.createMember("109172","bob", Seq("vip"))
			api.createEventAction("bet")
			api.createProduct("490","Scooby Slots", Seq("EX"),"slot", 1)

			When("the message is forwarded")
			transformer.apply(json, api)

			Then("the event should be received")
			assert(api.eventsReceivedForTest.keySet.contains(eventReferenceId))
		}

		it("should receive a published a message create the member and transform it into a CompetitionLabs event") {

			// Prepare the test
			val eventReferenceId = "1234"
			val transformer = new exampleMQTransformer()
			val json = exampleRabbitMQTest.jsonStringFromMq.toCharArray.map(_.toByte)
			val api = new CompetitionLabsApiTest()
			api.createEventAction("bet")
			api.createProduct("490","Scooby Slots", Seq("EX"),"slot", 1)

			When("the message is forwarded")
			transformer.apply(json, api)

			Then("the event should be received")
			assert(api.eventsReceivedForTest.keySet.contains(eventReferenceId))
		}



		it("should receive a published a message create the action and transform it into a CompetitionLabs event") {

			// Prepare the test
			val eventReferenceId = "1234"
			val transformer = new exampleMQTransformer()
			val json = exampleRabbitMQTest.jsonStringFromMq.toCharArray.map(_.toByte)
			val api = new CompetitionLabsApiTest()
			api.createMember("109172","bob", Seq("vip"))
			api.createProduct("490","Scooby Slots", Seq("EX"),"slot", 1)

			When("the message is forwarded")
			transformer.apply(json, api)

			Then("the event should be received")
			assert(api.eventsReceivedForTest.keySet.contains(eventReferenceId))
		}



		it("should receive a published a message create the product and transform it into a CompetitionLabs event") {

			// Prepare the test
			val eventReferenceId = "1234"
			val transformer = new exampleBetMQTransformer()
			val json = exampleRabbitMQTest.jsonStringFromMq.toCharArray.map(_.toByte)
			val api = new CompetitionLabsApiTest()
			api.createMember("109172","bob", Seq("vip"))
			api.createEventAction("bet")

			When("the message is forwarded")
			transformer.apply(json, api)

			Then("the event should be received")
			assert(api.eventsReceivedForTest.keySet.contains(eventReferenceId))
			}
		}
	}

	object exampleRabbitMQTest {
		val jsonStringFromMq: String =
			"""{
		  		"transaction": {
		  			"action": "bet",
			  		"transaction_id": "oahsdx123",
			  		"timestamp": "2017-07-30T17:20:20+00:00",
			  		"player_id": "109172",
		  			"game_type": 2,
		  			"game_id": 490,
			  		"win_cents": 0,
			  		"currency": "USD",
			  		"symbols": "11-15-13-1-7-11-12-11-6-6-8-9-10-6-9-4-2-16-9-7-8-14-11-1-6",
		  			"freespins_flag": false,
			  		"freerounds_flag": false
			  	}
			  }"""
		}
		```


## Transform outgoing WebHook messages from CompetitionLabs

You can use CompetitionLabs WebHook transformers to modify and send messages to your WebHook endpoints. You can map field in the CompetitionLabs data model to fields already implemented in your platform. You can also use the CompetitionLabs Transformer API to trigger additional actions and events.

You can create a CompetitionLabs WebHook transformer for any of the built in WebHook events. If you have a custom WebHook transformer configured, your custom transformer is used instead of the built in WebHook transformer.

To create a CompetitionLabs WebHook transformer:

1. Create a new class that extends CLWebhookTransformer.

	```scala
	package example.transformers

	import com.competitionlabs.transformers.{CLWebhookTransformer, CompetitionLabsApiExt}
	import com.competitionlabs.transformers.domain.WebhookSettings

	class exampleWebHookTransformer extends CLWebhookTransformer {

	// /**
    // * Executed when a new member is registered in your CompetitionLabs space
    // * @param settings The user supplied settings
    // * @param memberId The CompetitionLabs member id
    // * @param competitionLabsApi The CompetitionLabs API
    // */
	// override def onNewMember(settings: WebhookSettings, memberId: String, competitionLabsApi: CompetitionLabsApiExt): Unit = {
		}
	}
	```

2. Override one of the methods in CLWebhookTransformer with your implementation

	The following are the built in WebHook transformers you can override with your own custom transformer:

	* onNewProduct(): Executed when a new product is registered in your CompetitionLabs space
    * onNewMember(): Executed when a new member is registered in your CompetitionLabs space
    * onCompetitionCreated(): Executed when a new competition is created in your CompetitionLabs space
    * onCompetitionStarted(): Executed when a competition is started
    * onCompetitionFinished(): Executed when a competition finished
    * onCompetitionCancelled(): Executed when a competition is cancelled
    * onCompetitionRewardIssued(): Executed when a reward for a competition is issued
    * onContestCreated(): Executed when a new contest is created in your CompetitionLabs space
    * onContestStarted(): Executed when a contest is started
    * onContestFinished(): Executed when a contest finished
    * onContestFinalised(): Executed when a contest is finalised
    * onContestCancelled(): Executed when a contest is cancelled
    * onContestRewardIssued(): Executed when a contest reward is issued
    * onAchievementCreated(): Executed when a new achievement is created
    * onAchievementTriggered(): Executed when an achievement is triggered
    * onAchievementRewardIssued(): Executed when a reward was awarded to a member


### Example WebHook transformer

Here is an example of a WebHook transformer.

```scala

import com.competitionlabs.transformers.domain.WebhookSettings
import com.competitionlabs.transformers.{CLWebhookTransformer, CompetitionLabsApiExt}
import org.joda.time.DateTime

class DefaultWebhookTransformer extends CLWebhookTransformer {
		override def onAchievementTriggered(settings: WebhookSettings, achievementId: String, memberId: String, competitionLabsApi: CompetitionLabsApiExt): Unit = {

		val body = Map[String, Any](
			"accountId" -> competitionLabsApi.accountId,
			"achievementId" -> achievementId,
			"memberId" -> memberId,
			"memberIdRefId" -> competitionLabsApi.memberRefIdFromMemberId(memberId),
			"resourcePath" -> s"/api/${competitionLabsApi.spaceName}/achievement/$achievementId",
			"timestamp" -> DateTime.now().getMillis
		)

		val json =  competitionLabsApi.toJsonFromMap(body)
		val headers = settings.headers ++ competitionLabsApi.HTTPDefaultHeader

		competitionLabsApi.httpPost(settings.url, json, headers)
	}
}

```


## Developing and Testing Transformers

This section covers the tools needed to begin writing and testing CompetitionLabs Transformers

### System Requirements

These are the tools you will need to develop CompetitionLabs Transformers

Scala 2.11
Java 1.8 JDK
JetBrains IntelliJ (Optional)

### CompetitionLabs Transformer API

The CompetitionLabs Transformer API is used within your transformer classes to perform various operations like looking up members, pushing events, creating actions, etc.

You can view the methods available for CLMQTransformer and CLWebhookTransformer classes here:
`competitionlabs-transformers/src/main/scala/com/competitionlabs/transformers/CompetitionLabsApi.scala`

You can view addition methods available for CLWebhookTransformer classes here:
`clabs/competitionlabs-transformers/src/main/scala/com/competitionlabs/transformers/CompetitionLabsApiExt.scala`
